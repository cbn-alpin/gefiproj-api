from datetime import datetime
import json
from flask import Blueprint, current_app, jsonify, request, Response
from shared.entity import Session
from sqlalchemy import func, desc
from sqlalchemy.orm import join
from .entities import Funding, FundingSchema
from ..receipts.entities import Receipt, ReceiptSchema
from ..projects.entities import Project, ProjectSchema

STATUS_DEFAULT = 'ANTR'
STATUS_SOLDE = 'SOLDE'

class FundingDBService:
    @staticmethod
    def get_funding_by_project_id(project_id):
        session = Session()
        found_funding = session.query(Funding).filter_by(id_p=project_id).all()
        session.close()
        return found_funding


    @staticmethod
    def check_project_exists(project_id):
        session = Session()
        existing_project = session.query(Project).filter_by(id_p=project_id).first()
        session.close()
        if existing_project is None:
            raise ValueError(f'Le projet {project_id} n\'existe pas.',404)


    @staticmethod
    def check_funding_exists(funding_id):
        session = Session()
        existing_funding = session.query(Funding).filter_by(id_f=funding_id).first()
        session.close()
        if existing_funding is None:
            raise ValueError(f'Le financement {funding_id} n\'existe pas.',404)


    @staticmethod
    def get_funding_by_projects(project_id: int):
        response = Response()
        try:
            session = Session()  
            funding_object = session.query(Funding).filter(Funding.id_p == project_id).order_by(Funding.id_f.desc()).all()
            # sum of receipts generated by this funding
            rest_amount_funding_object = session.query(Funding.id_f, (Funding.montant_arrete_f - func.sum(Receipt.montant_r)).label('difference')) \
                .join(Receipt, Receipt.id_f == Funding.id_f, isouter=True) \
                .filter(Funding.id_p == project_id)\
                .group_by(Funding.id_f)\
                .order_by(Funding.id_f.desc())

            # Transforming into JSON-serializable objects
            schema = FundingSchema(many=True)
            funding = schema.dump(funding_object)
            rest_amount_funding = schema.dump(rest_amount_funding_object)
            
            for i,f in enumerate(funding):
                if rest_amount_funding[i]['id_f'] == f['id_f']:
                    if f['statut_f'] == STATUS_SOLDE:
                        f['solde'] = True
                    else:
                        f['solde'] = False

                    if rest_amount_funding[i]['difference'] == None:
                        f['difference'] = 0
                    else:
                        f['difference'] = rest_amount_funding[i]['difference']

            # Serializing as JSON
            session.close()
            response = jsonify(funding)
        except ValueError as error:
            response.data = str(error.args[0])
            response.status_code = error.args[1]
        finally:  
            return response


    @staticmethod
    def insert_funding(posted_funding):
        # Convert date format
        # posted_funding = convert_funding_dates(posted_funding)

        if posted_funding['statut_f'] == 'SOLDE' and \
        any(key not in posted_funding for key in ['montant_arrete_f','id_financeur','statut_f','date_solde_f']):
            raise ValueError(f'Le statut du financement ne peut pas être soldé.',403)

        # Init statut funding
        if 'statut_f' not in posted_funding:
            posted_funding['statut_f'] = 'ANTR'

        posted_funding['montant_arrete_f'] = float(posted_funding['montant_arrete_f'])
        # Mount funding object
        posted_funding = FundingSchema(only=(
            'id_p', 'id_financeur', 'montant_arrete_f', 'statut_f', 'date_solde_f', 'date_arrete_f', 'date_limite_solde_f',
            'commentaire_admin_f', 'commentaire_resp_f', 'numero_titre_f', 'annee_titre_f', 'imputation_f')) \
            .load(posted_funding)
        data = Funding(**posted_funding)

        # Persist funding
        session = Session()
        session.add(data)
        session.commit()

        # Return created funding
        new_funding = FundingSchema().dump(data)
        session.close()
        return jsonify(new_funding)


    @staticmethod
    def update_funding(funding):
        # Convert date format
        #data = convert_funding_dates(data)

        if funding['statut_f'] == 'SOLDE' and (\
            funding['montant_arrete_f'] == None or
            funding['id_financeur'] == None or
            funding['statut_f'] == None or
            funding['date_solde_f'] == None ):
            id_f = funding['id_f']
            raise ValueError(f'Le statut du financement {id_f} ne peut pas être soldé.',403)
        
        # Mount funding object
        funding = FundingSchema(only=(
            'id_f', 'id_p', 'id_financeur', 'montant_arrete_f', 'statut_f', 'date_solde_f', 'date_arrete_f',
            'date_limite_solde_f', 'commentaire_admin_f', 'commentaire_resp_f', 'numero_titre_f', 'annee_titre_f',
            'imputation_f')) \
            .load(funding)
        funding = Funding(**funding)
        # Start DB session
        session = Session()
        session.merge(funding)
        session.commit()

        # Return updated funding
        updated_funding = FundingSchema().dump(funding)
        session.close()
        return jsonify(updated_funding)


    @staticmethod
    def delete_funding(funding_id):
        response = Response()
        try:
            session = Session()
            funding = session.query(Funding).filter_by(id_f=funding_id).first()
            session.delete(funding)
            session.commit()
            session.close()
            reponse = jsonify({
                'message': f'Le financement {funding_id} a été supprimé'
            }), 204
        except ValueError as error:
            response = Response(str(error),status=404)
        except Exception as error:
            response.data = str(error)
            response.status_code = 400
        finally:
            return response


    def convert_funding_dates(self,funding):
        if 'date_solde_f' in funding:
            funding['date_solde_f'] = date_convert(funding['date_solde_f'])
        else:
            funding['date_solde_f'] = None

        if 'date_arrete_f' in funding:
            funding['date_arrete_f'] = date_convert(funding['date_arrete_f'])
        else:
            funding['date_arrete_f'] = None

        if 'date_limite_solde_f' in funding:
            funding['date_limite_solde_f'] = date_convert(funding['date_limite_solde_f'])
        else:
            funding['date_limite_solde_f'] = None

        return funding


    def date_convert(self,date_time_str):
        date = None
        if date_time_str is not None:
            date_time_obj = datetime.strptime(date_time_str, '%Y-%m-%d')
            date = date_time_obj.date().isoformat()
        return date
