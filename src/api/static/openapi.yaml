# example from here: https://dev.to/sanjan/how-to-add-swagger-ui-to-a-plain-flask-api-project-with-an-openapi-specification-file-1jl8
swagger: "2.0"
info:
  description: "API pour le projet de gestion financière du CBN Alpin. \nCode source  [https://github.com/cbn-alpin/gefiproj-api/](https://github.com/cbn-alpin/gefiproj-api/)."
  version: "1.0.0"
  title: "GEFIPROJ API"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "MIT License"
    url: "https://mit-license.org/"
tags:
  - name: "Athentification"
    description: "Gestion de l'autentification"
  - name: "Dépenses"
    description: "Gestion des dépenses"
  - name: "Projets"
    description: "Gestion des projets"
  - name: "Financements"
    description: "Gestion des financements"
  - name: "Recettes"
    description: "Gestion des Recettes"
  - name: "Utilisateurs"
    description: "Gestion des utilisateurs"
schemes:
  - "http"
  - "https"
paths:
  # authentication section
  /api/auth/login:
    post:
      tags:
        - "Athentification"
      summary: "Obtenir un jeton d'authentification"
      description: "Retourne un token de connexion permettant d'acceder aux ressouces protegées"
      operationId: "login"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Identifiants de l'utilisateur"
          required: true
          schema:
            $ref: "#/definitions/Login"
      responses:
        "401":
          description: "Erreur d'authentification"
        "404":
          description: "Le login indiqué est introuvable"
        "200":
          description: "Connexion réussie"
          schema:
            $ref: "#/definitions/LoginResponse"


  /api/auth/refresh:
    post:
      tags:
        - "Athentification"
      summary: "Obtenir un jeton nouveau d'authentification"
      description: "Retourne un nouveau token de connexion"
      operationId: "refreshToken"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - api_key: [ ]
      responses:
        "401":
          description: "Erreur d'authentification"
        "200":
          description: "Nouveau token généré avec succès"
          schema:
            type: string
            example: { access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDk2NzQ3MTQsIm5iZiI6MTYwOTY3NDcxNCwianRpI" }


  /api/auth/register:
    post:
      tags:
        - "Athentification"
      summary: "Enregistre un nouvel utilisateur"
      description: "Retourne le nouvel utilisateur créé"
      operationId: "registerUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Informations du nouvel utilisateur"
          required: true
          schema:
            $ref: "#/definitions/Utilisateur"
      security:
        - api_key: [ ]
      responses:
        "403":
          description: "Erreur d'authentification"
        "200":
          description: "Nouvel utilisateur créé avec succès"
          schema:
            type: string
            $ref: "#/definitions/Utilisateur"


  # Dépenses
  /api/expenses:
    post:
      tags:
        - Dépenses
      summary: "Enregistre une nouvelle dépense"
      description: "Retourne la nouvelle dépense créee"
      operationId: "createExpense"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Informations de la nouvelle dépense"
          required: true
          schema:
            $ref: "#/definitions/Depense"
      security:
        - api_key: [ ]
      responses:
        "403":
          description: "Erreur d'authentification"
        "200":
          description: "Nouvelle dépense créée avec succès"
          schema:
            type: string
            $ref: "#/definitions/Depense"


        # Projet section
  /api/projects:
    post:
      tags:
        - "Projets"
      summary: "Ajouter un nouveau projet"
      description: ""
      operationId: "addProject"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Projet qui doit être ajouté"
          required: true
          schema:
            $ref: "#/definitions/Project"
      responses:
        "403":
          description: "Erreur d'authentification"
        "404":
          description: "Le responsaple indiqué est introuvable"
        "422":
          description: "Erreur de validation des entrées"
        "201":
          description: "Projet créé"
          schema:
            $ref: "#/definitions/Project"
      security:
        - api_key: [ ]

    get:
      tags:
        - "Projets"
      summary: "Récupérer tous les projets"
      description: ""
      operationId: "getAllProjects"
      produces:
        - "application/json"
      responses:
        "403":
          description: "Erreur d'authentification"
        "422":
          description: "Erreur de validation des entrées"
        "200":
          description: "Retourne une liste de projets"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
      security:
        - api_key: [ ]


  /api/projects/{projectId}:
    get:
      tags:
        - "Projets"
      summary: "Trouver un projet grâce à son identifiant"
      description: "Retourne un projet"
      operationId: "getProjectById"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "id du projet"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "403":
          description: "Erreur d'authentification"
        "200":
          description: "Retourne un projet"
          schema:
            $ref: "#/definitions/Project"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Projet introuvable"
      security:
        - api_key: [ ]

    put:
      tags:
        - "Projets"
      summary: "Mettre à jour un projet"
      description: ""
      operationId: "updateProjectWithFormData"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "id du projet"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Modifications à apporter au projet"
          required: true
          schema:
            $ref: "#/definitions/Project"
      responses:
        "403":
          description: "Erreur d'authentification"
        "200":
          description: "Opération réussie"
          schema:
            $ref: "#/definitions/Project"
        "404":
          description: "Projet introuvable"
      security:
        - api_key: [ ]

    delete:
      tags:
        - "Projets"
      summary: "Supprimer un projet"
      description: ""
      operationId: "deleteProject"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "id du projet à supprimer"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "403":
          description: "Erreur d'authentification"
        "404":
          description: "Projet introuvable"
        "204":
          description: "Opération réussie"
      security:
        - api_key: [ ]


  # Recettes
  /api/receipts:
    post:
      tags:
        - "Recettes"
      summary: "Enregistre une nouvelle recette"
      description: "Retourne la recette créée"
      operationId: "createReceipt"
      security:
        - api_key: [ ]
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Informations de la nouvelle recette"
          required: true
          schema:
            $ref: "#/definitions/Recette"
      responses:
        "401":
          description: "Utilisateur non autorisé. Généralement un problème de token"
        "422":
          description: "Erreur de validation des entrées"
        "200":
          description: "Recette qui a été créée"
          schema:
            items:
              $ref: "#/definitions/Recette"


        # Utilisateurs section
  /api/users:
    get:
      tags:
        - "Utilisateurs"
      summary: "Récupérer tous les utilisateurs"
      description: ""
      operationId: "getAllUsers"
      security:
        - api_key: [ ]
      produces:
        - "application/json"
      responses:
        "403":
          description: "Erreur d'authentification"
        "422":
          description: "Erreur de validation des entrées"
        "200":
          description: "Retourne une liste d'utilisateurs"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Utilisateur"

  /api/users/{userId}:
    get:
      tags:
        - "Utilisateurs"
      summary: "Touver un utilisateur grâce à son identifiant"
      description: "Retourne un utilisateur"
      operationId: "getUserById"
      produces:
        - "application/json"
      security:
        - api_key: [ ]
      parameters:
        - name: "userId"
          in: "path"
          description: "id de l'utilisateur"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "403":
          description: "Erreur d'authentification"
        "200":
          description: "Retourne un utilisateur"
          schema:
            $ref: "#/definitions/Utilisateur"
        "404":
          description: "Projet introuvable"

securityDefinitions:
  api_key:
    type: apiKey
    name: "Authorization"
    in: header
definitions:
  Project:
    type: "object"
    required:
      - "id_u"
      - "code_p"
      - "nom_p"
      - "statut_p"
    properties:
      id_p:
        type: "integer"
        format: "int64"
        description: "id du projet"
        example: 1
      id_u:
        type: "integer"
        format: "int64"
        example: 1
        description: "reference du responsable de projet"
      code_p:
        type: "string"
        example: "CA3"
      nom_p:
        type: "string"
        example: "Un nom de projet"
      statut_p:
        type: "boolean"
  Login:
    type: object
    required:
      - "login"
      - "password"
    properties:
      login:
        type: string
        description: "Email de connexion de l'utilisateur"
        example: "testimail@mail.com"
      password:
        type: string
        description: "Email de connexion de l'utilisateur"
        example: "super mot de passe"
  LoginResponse:
    type: object
    properties:
      access_token:
        type: string
        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDk2NzQ3MTQsIm5iZiI6MTYwOTY3NDcxNCwianRpI"
        description: "Token d'accès aux ressources"
      refresh_token:
        type: string
        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDk2NzQ3MTQsIm5iZiI6MTYwOTY3NDcxNCwianRpI"
        description: "Token de rafraissement"
      active_u:
        type: boolean
        example: true
        description: "Status de l'utilisateur"
      email_u:
        type: string
        example: "testimail@mail.com"
        description: "email de l'utilisateur"
      nom_u:
        type: string
        example: "Sanou"
        description: "Nom de l'utilisateur"
      prenom_u:
        type: string
        example: "Madou"
        description: "Prenom de l'utilisateur"
      initiales_u:
        type: string
        description: "Initiales de l'utilisateur"
      roles:
        type: array
        example: [ "administrateur" ]
        description: "Tableau des rôles de l'utilisateur"
  Recette:
    type: object
    properties:
      id_r:
        type: integer
        description: Identifiant de la recette
        example: 5
      id_f:
        type: integer
        description: Identifiant du financement associé
        example: 8
      annee_r:
        type: integer
        description: Année de la recette
        example: 2021
      montant_r:
        type: number
        description: Montant de la recette
        example: 2357.79
    required:
      - "annee_r"
      - "montant_r"
      - "id_f"
  Utilisateur:
    type: object
    required:
      - "nom_u"
      - "prenom_u"
      - "initiales_u"
      - "email_u"
      - "active_u"
    properties:
      nom_u:
        type: string
        description: "Nom de l'utilisateur"
        example: "Dupont"
      prenom_u:
        type: string
        description: "Prenom de l'utilisateur"
        example: "Yatimè"
      email_u:
        type: string
        description: "Email de l'utilisateur"
        example: "testimail@mail.ml"
      initiales_u:
        type: string
        description: "Initiales de l'utilisateur"
        example: "YDU"
      password_u:
        type: string
        description: "Mot de passe de l'utilisateur"
        example: "super mot de passe"
      active_u:
        type: boolean
        description: "Indique si l'utilisateur est actif"
        example: false
  Depense:
    type: object
    required:
      - "annee_d"
      - "montant_d"
    properties:
      id_d:
        type: integer
        description: "Identifiant de la dépense"
        example: 2
      annee_d:
        type: integer
        description: "Année de la dépense"
        example: 2019
      montant_d:
        type: number
        description: "Montant de la dépense"
        example: 3793.67
